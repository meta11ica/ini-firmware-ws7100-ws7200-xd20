import zlib
import os
import sys
 
# Function to calculate CRC-32
def calculate_crc(content):
    return zlib.crc32(content)
 
# Function to read the file and get its size and CRC-32 checksum
def process_firmware_file(file_path):
    with open(file_path, 'rb') as f:
        file_content = f.read()
        file_size = os.path.getsize(file_path)
        file_crc = calculate_crc(file_content)
    return file_size, file_crc
 
# Function to create the .ini file content
def generate_ini_content(filename, filesize, firmware_crc):
    # Replace with file data
    content = f"""
# autogenerated by tools
# do NOT modify this file
IMAGE_NAME={filename}
IMAGE_SIZE={filesize}
PACKAGE_ID=fnt-HGW
PRODUCT_ID=fnt-HGW
FIRMWARE_VERSION=0
PCB_VERSION=0
FIRMWARE_CRC_SUM={firmware_crc}
PARTITIONS=CFE,0x00000000-0x0000FFFF,uncover|kernelfs,0x00010000-0x003FFFFF,cover
INI_CRC_SUM=""".strip()

    # Append CRC of the content to INI_CRC_SUM
    ini_crc_sum = calculate_crc(content.encode())
    content = content.replace("INI_CRC_SUM=", f"INI_CRC_SUM={ini_crc_sum}")
 
    return content
 
# Main function to handle file operations
def main():
    if len(sys.argv) != 2:
        print("Usage: python script.py <firmware_file>")
        return
 
    firmware_file = sys.argv[1]
 
    # Get the file name without the extension
    filename = os.path.basename(firmware_file)
    base_name = os.path.splitext(filename)[0]
 
    # Process the firmware file to get the size and CRC-32
    filesize, firmware_crc = process_firmware_file(firmware_file)
 
    # Generate the content of the .ini file
    ini_content = generate_ini_content(filename, filesize, firmware_crc)
 
    # Save the content to a new .ini file
    ini_filename = f"{base_name}.ini"
    with open(ini_filename, 'w', newline='\n') as ini_file:
        ini_file.write(ini_content)
 
    print(f"INI file created: {ini_filename}")
 
if __name__ == "__main__":
    main()